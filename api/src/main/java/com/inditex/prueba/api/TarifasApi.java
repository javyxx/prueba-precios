/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.inditex.prueba.api;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import com.inditex.prueba.model.TarifasResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-03T11:15:34.362354800+01:00[Europe/Madrid]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "tarifas", description = "the tarifas API")
public interface TarifasApi {

    /**
     * GET /tarifas : Consulta de tarifas
     * Obtiene la tarifa aplicable para un producto en una fecha dada y una cadena específica.
     *
     * @param fechaAplicacion Fecha de aplicación en formato ISO 8601. (required)
     * @param productoId Identificador del producto. (required)
     * @param cadenaId Identificador de la cadena. (required)
     * @return Respuesta exitosa con la tarifa aplicable. (status code 200)
     *         or Petición incorrecta debido a parámetros inválidos. (status code 400)
     *         or No se encontró una tarifa aplicable para los parámetros dados. (status code 404)
     *         or Error interno del servidor. (status code 500)
     */
    @Operation(
        operationId = "obtenerTarifas",
        summary = "Consulta de tarifas",
        description = "Obtiene la tarifa aplicable para un producto en una fecha dada y una cadena específica.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Respuesta exitosa con la tarifa aplicable.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TarifasResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Petición incorrecta debido a parámetros inválidos."),
            @ApiResponse(responseCode = "404", description = "No se encontró una tarifa aplicable para los parámetros dados."),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tarifas",
        produces = { "application/json" }
    )
    
    ResponseEntity<TarifasResponse> obtenerTarifas(
        @NotNull @Parameter(name = "fechaAplicacion", description = "Fecha de aplicación en formato ISO 8601.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "fechaAplicacion", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime fechaAplicacion,
        @NotNull @Parameter(name = "productoId", description = "Identificador del producto.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "productoId", required = true) Integer productoId,
        @NotNull @Parameter(name = "cadenaId", description = "Identificador de la cadena.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "cadenaId", required = true) Integer cadenaId
    );

}
